What was changed
================

 This is fontforge modified version TTF files from original Ascender's latest 
 TTF (1.03) which consists of the following differences (Special thanks to 
 George Williams from fontforge development mailing list for valuable 
 information):


 Ignored DSIG and VDMX table 
 ===========================

  Due to the current fontforge could not preserve the DSIG and VDMX table in 
  original TTF files from Ascender, they are not included in these fontforge 
  generated TTF files. Hence, original TTF files are kept available in case 
  when solutions are available in future.

  According to Ascender, DSIG table is digital signature which generally does 
  not affect glyph data. However, exclusion of VDMX table might results 
  differences on glyphs. This is still in inspection at the moment.


 Fixed Unicode Name Mapping Inaccuracy
 =====================================

  Fontforge upstream reported that there are Unicode names mapped to 
  inaccurately. According to Ascender, the Unicode names is not applicable 
  except by postscript format. The fix is still included in this version.


 Reencoded with "Glyph Order"
 ============================

  Fontforge upstream stated that FontForge has reordered the glyphs. It does 
  this because it always outputs glyphs in encoding order. Therefore, to let 
  glyphs retain the original ordering theencoding to "Glyph Order" (or 
  "Original") was changed before enerating the ttf.


 Generated TTFs with 'kern' table rather than 'GPOS' table
 =========================================================

  One difference which is not visible in the sfd file is that FontForge has 
  generated a 'GPOS' table rather than a 'kern' table in the TTFs. Hence, the 
  table had been switched to 'kern' table during TTFs generation.


 Changed XUIDs
 =============

  Each time it loads a new truetype font it generates a random PostScript XUID. 
  This will be different because it must be different. XUIDs are completely 
  irrelevant for truetype but are stored in the sfd file in case the user 
  chooses to generate a PostScript font from this source at some time in the 
  future. None of these changes has any effect on the semantics of the generated
  ttf. The same information is present in both fonts.


 Modified with UPOS bug patched version of FontForge
 ===================================================

  This is indeed a bug in FontForge, which is now fixed. (It's also well nigh 
  irrelevant. Nobody cares about this field. It is stored differently in the 
  ttf 'post' table than it is in a PostScript FontInfo dict (which is why 
  fontforge gets it wrong).)


What was not fixed
==================


 Different Instruction Size on 'maxp' and 'fpgm' table
 =====================================================

  The "Instruction size" field of the 'maxp' table is different. The entry in 
  the LiberationSans font as released on the RedHat site might be incorrect 
  and the value FontForge has placed in its stead might be correct. This is 
  because the length of the 'fpgm' table of that font is 1797 and this is 
  greater than the 1111 value stored in	the 'maxp' table.


 GDEF table was added by FontForge
 =================================

  FontForge has given TTFs a GDEF table with glyph class info. It does this 
  because these fonts contain different classes of glyphs, and in an opentype 
  font that should be noted.
